{"version":3,"sources":["Components/Todo.jsx","Components/Todolist.jsx","Components/Todoform.jsx","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","toggleCompleted","removeTodo","ListItem","id","className","completed","Checkbox","type","onClick","Typography","variant","style","textDecoration","task","IconButton","color","display","Todolist","todos","List","map","key","Todoform","addTodo","useState","setTodos","onSubmit","e","preventDefault","trim","uuid","v4","TextField","label","value","onChange","target","console","log","placeholder","Button","App","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","padding","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.535c2495.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport { Checkbox, IconButton, ListItem, Typography } from '@material-ui/core/';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Icon from '@material-ui/core/Icon';\r\nfunction Todo( {todo, toggleCompleted, removeTodo}) {\r\n\r\n    function HandleRemove() {\r\n        removeTodo(todo.id)\r\n    }\r\n\r\n    return (\r\n        <ListItem id={todo.id} className={todo.completed ? 'completed' : ''}>\r\n        \r\n        <Checkbox type=\"checkbox\" onClick={()=>toggleCompleted(todo.id)}/>\r\n        <Typography variant=\"body1\" style={{textDecoration: todo.completed ? 'line-through' : null}} >{todo.task}</Typography>\r\n        <IconButton variant=\"contained\" color=\"primary\" onClick={HandleRemove} style={{ display : 'inline' }}>\r\n            <CloseIcon/>\r\n        </IconButton>\r\n       \r\n        \r\n        \r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default Todo;","import React, { useState } from 'react'\r\nimport { render } from '@testing-library/react'\r\nimport Todo from './Todo'\r\nimport { List } from '@material-ui/core/';\r\nfunction Todolist( { todos, toggleCompleted, removeTodo }){\r\n\r\n    return ( \r\n        <List>\r\n            {\r\n                todos.map(todo => (\r\n                    <Todo key={todo.id} todo={todo} toggleCompleted={toggleCompleted} removeTodo={removeTodo}/>\r\n                ))\r\n            }\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default Todolist;","import React, { useState} from 'react';\r\nimport uuid from \"uuid\";\r\nimport { Button, TextField } from '@material-ui/core/';\r\nfunction Todoform({ addTodo }) {\r\n    const [ todo, setTodos ] = useState({\r\n        id: \"\",\r\n        task: \"\",\r\n        completed: false\r\n    });\r\n\r\n    function handleInputChange(e) {\r\n        \r\n        setTodos({ ...todo, task: e.target.value })\r\n        console.log(e.target.value);\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (todo.task.trim()) {\r\n            addTodo( { ...todo, id: uuid.v4() });\r\n            //reset\r\n            setTodos({ ...todo, task: \"\"});\r\n        }\r\n    }\r\n\r\n    return ( \r\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n            <TextField \r\n                label=\"texto\"\r\n                type=\"text\"\r\n                value={todo.task}    \r\n                onChange={handleInputChange}\r\n                placeholder=\"escribe aquÃ­\"\r\n            /> \r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">Enviar</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Todoform;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Todolist from './Components/Todolist.jsx'\nimport Todoform from './Components/Todoform.jsx'\nimport Typography from '@material-ui/core/Typography';\n\nconst LOCAL_STORAGE_KEY = 'react-todo-list';\n\nfunction App() {\n\n  const [ todos, setTodos ] = useState([]);\n\n  useEffect(() => {\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if(todos){\n      setTodos(storageTodos)\n    }\n  }, []);\n\n  useEffect(() => {\n    //efect\n    localStorage.setItem(LOCAL_STORAGE_KEY,JSON.stringify(todos))\n    return() => {\n\n    }\n  }, [todos]);\n\n  function addTodo(todo) {\n    setTodos([todo, ...todos]);\n  }\n\n  function toggleCompleted(id) {\n    setTodos(\n      todos.map(todo => {\n        if(todo.id === id){\n          return {\n            ...todo,\n            completed: !todo.completed\n          }\n        }\n        return todo; \n      })\n    )\n  }\n\n  function removeTodo(id){\n    setTodos(todos.filter((todo) => { return todo.id !== id }))\n  }\n\n\n  return (\n    <div className=\"container\">\n      <div className=\"App\">\n        <Typography variant=\"h5\" style={{ padding: 16 }}>Todo list</Typography>\n        \n        <Todoform addTodo={addTodo} />\n        <Todolist todos={todos} toggleCompleted={toggleCompleted} removeTodo={removeTodo}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}